{"version":3,"sources":["components/EditorContainer.js","redux/serverdata/serverDataActions.js","redux/serverdata/serverDataTypes.js","components/LogInContainer.js","redux/login/logInActions.js","redux/login/logInTypes.js","App.js","redux/client/clientActions.js","redux/client/clientTypes.js","redux/websocket/websocketActions.js","redux/websocket/websocketTypes.js","redux/login/logInReducers.js","redux/websocket/websocketReducers.js","redux/client/clientReducers.js","redux/serverdata/serverDataReducers.js","redux/rootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["ShowEditorSection","state","useSelector","shallowEqual","className","Object","entries","currentUsersReducer","currentUsers","map","user","index","Fragment","key","username","id","size","scale","seed","UncontrolledTooltip","placement","target","options","placeholder","text","textReducer","toolbar","buttons","onChange","clientReducer","client","send","JSON","stringify","type","logInReducer","content","userActivityReducer","userActivity","activity","payload","ShowLoginSection","dispatch","useDispatch","inputEl","useRef","websocketReducer","websocketConnected","onSubmit","e","data","current","value","replace","preventDefault","name","title","pattern","ref","required","App","contentDefaultMessage","useEffect","clients","W3CWebSocket","onopen","console","log","websocket","onmessage","message","dataFromServer","parse","stateToChange","editorContent","values","users","length","Navbar","color","light","NavbarBrand","href","action","initialState","initState","activityState","rootReducer","combineReducers","undefined","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bd6b881.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\nimport { UncontrolledTooltip } from \"reactstrap\";\r\nimport Editor from \"react-medium-editor\";\r\nimport \"medium-editor/dist/css/medium-editor.css\";\r\nimport \"medium-editor/dist/css/themes/default.css\";\r\nimport Blockies from 'react-blockies';\r\n\r\n\r\n\r\nconst ShowEditorSection = () => {\r\n  const state = useSelector(state => state, shallowEqual);\r\n  const contentDefaultMessage = \"Start writing your document here\";\r\n\r\n  /* When content changes, we send the\r\ncurrent content of the editor to the server. */\r\n  const onEditorStateChange = text => {\r\n    state.clientReducer.client.send(\r\n      JSON.stringify({\r\n        type: \"contentchange\",\r\n        username: state.logInReducer.username,\r\n        content: text\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-7 order-last order-md-first\">\r\n          <div className=\"document-holder\">\r\n            <div className=\"currentusers\">\r\n              {Object.entries(state.currentUsersReducer.currentUsers).map(\r\n                (user, index) => (\r\n                  <React.Fragment key={user[1].username + `${index}`}>\r\n                    <span id={`Hi${user[1].username}`} className=\"userInfo\">\r\n                      <Blockies\r\n                        className=\"account__avatar identicon\"\r\n                       // style={{ backgroundColor: user[1].randomcolor }}\r\n                        size={5}\r\n                        scale={8}\r\n                        seed={user[1].username}\r\n                      />\r\n                    </span>\r\n                    <UncontrolledTooltip\r\n                      placement=\"top\"\r\n                      target={`Hi${user[1].username}`}\r\n                    >\r\n                      {user[1].username}\r\n                    </UncontrolledTooltip>\r\n                  </React.Fragment>\r\n                )\r\n              )}\r\n            </div>\r\n            <Editor\r\n              options={{\r\n                placeholder: {\r\n                  text: state.textReducer ? contentDefaultMessage : \"\"\r\n                },\r\n                toolbar: { buttons: [\"bold\", \"italic\", \"underline\"] }\r\n              }}\r\n              className=\"body-editor h-75 unique_and_mandatory_class_name\"\r\n              text={state.textReducer}\r\n              onChange={onEditorStateChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-5 order-first order-md-first\">\r\n          <div className=\"history-holder\">\r\n            {/*console.log(state.userActivityReducer) */}\r\n            <ul>\r\n              {Object.entries(state.userActivityReducer.userActivity).map(\r\n                (activity, index) => {\r\n                  return <li key={`activity-${index}`}>{activity[1]}</li>;\r\n                }\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowEditorSection;\r\n","import { UPDATE_CURRENT_USERS } from \"./serverDataTypes\";\r\nimport { UPDATE_USER_ACTIVITY } from \"./serverDataTypes\";\r\nimport { UPDATE_TEXT } from \"./serverDataTypes\";\r\n\r\nexport const currentUsers = payload => {\r\n  return {\r\n    type: UPDATE_CURRENT_USERS,\r\n    payload: payload\r\n  };\r\n};\r\n\r\nexport const userActivity = payload => {\r\n  return {\r\n    type: UPDATE_USER_ACTIVITY,\r\n    payload: payload\r\n  };\r\n};\r\n\r\nexport const text = payload => {\r\n  return {\r\n    type: UPDATE_TEXT,\r\n    payload: payload[0]\r\n  };\r\n};\r\n","export const UPDATE_CURRENT_USERS = \"UPDATE_CURRENT_USERS\";\r\nexport const UPDATE_USER_ACTIVITY = \"UPDATE_USER_ACTIVITY\";\r\nexport const UPDATE_TEXT = \"UPDATE_TEXT\";\r\n","import React, { useRef } from \"react\";\r\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\r\nimport { setUsername } from \"../redux\";\r\nimport Blockies from 'react-blockies';\r\n\r\nconst ShowLoginSection = () => {\r\n  const state = useSelector(state => state, shallowEqual);\r\n  const dispatch = useDispatch();\r\n  const inputEl = useRef(null);\r\n\r\n  const logInUser = e => {\r\n    const username = inputEl.current.value.replace(/ /g, \"\");\r\n    const data = username;\r\n\r\n    if (!state.websocketReducer.websocketConnected) {\r\n      return e.preventDefault();\r\n    }\r\n    dispatch(setUsername(data));\r\n    state.clientReducer.client.send(\r\n      JSON.stringify({\r\n        username: data,\r\n        type: \"userevent\"\r\n      })\r\n    );\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      <div className=\"account__wrapper\">\r\n        <div className=\"account__card\">\r\n          <div className=\"account__profile\">\r\n            <Blockies\r\n              className=\"account__avatar identicon\"\r\n              size={10}\r\n              scale={10}\r\n              seed=\"randomness\"\r\n            />\r\n            {!state.websocketReducer.websocketConnected ? (\r\n              <p className=\"text-center\">\r\n                Connecting to server. Please wait...\r\n              </p>\r\n            ) : (\r\n              <>\r\n                <p className=\"account__name\">Hello, user!</p>\r\n                <p className=\"account__sub\">Join to edit the document</p>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <form onSubmit={logInUser}>\r\n            <input\r\n              name=\"username\"\r\n              type=\"text\"\r\n              title=\"No special characters and less than 16 characters\"\r\n              pattern=\"[\\sA-Za-z0-9\\s]{1,15}\"\r\n              ref={inputEl}\r\n              className=\"form-control\"\r\n              required\r\n            />\r\n            <input type=\"submit\" className=\"btn account__btn\" value=\"Join\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ShowLoginSection;\r\n","import { SET_USERNAME } from \"./logInTypes\";\r\n\r\nexport const setUsername = payload => {\r\n  return {\r\n    type: SET_USERNAME,\r\n    payload: payload\r\n  };\r\n};\r\n","export const SET_USERNAME = 'SET_USERNAME';","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport { Navbar, NavbarBrand } from \"reactstrap\";\r\nimport \"./App.css\";\r\nimport ShowEditorSection from \"./components/EditorContainer\";\r\nimport ShowLoginSection from \"./components/LogInContainer\";\r\nimport { websocket } from \"./redux\";\r\nimport { client } from \"./redux\";\r\nimport { userActivity, currentUsers, text } from \"./redux\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const contentDefaultMessage = [\"Start writing your document here\"];\r\n  const state = useSelector(state => state, shallowEqual);\r\n\r\n  useEffect(() => {\r\n    const clients = new W3CWebSocket(\"wss://server-editor.herokuapp.com/\");\r\n    clients.onopen = () => {\r\n      console.log(\"WebSocket Client Connected\");\r\n      dispatch(client({ client: clients }));\r\n      dispatch(websocket({ websocketConnected: true }));\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!state.logInReducer) return;\r\n    state.clientReducer.client.onmessage = message => {\r\n      const dataFromServer = JSON.parse(message.data);\r\n      const stateToChange = {};\r\n      if (dataFromServer.type === \"userevent\") {\r\n        if (dataFromServer.data.editorContent) {\r\n          stateToChange.currentUsers = Object.values(dataFromServer.data.users);\r\n          stateToChange.text = [dataFromServer.data.editorContent];\r\n        } else {\r\n          stateToChange.currentUsers = Object.values(dataFromServer.data.users);\r\n          stateToChange.text = state.textReducer.length\r\n            ? [state.textReducer]\r\n            : contentDefaultMessage;\r\n        }\r\n      } else if (dataFromServer.type === \"contentchange\") {\r\n        stateToChange.text =\r\n          [dataFromServer.data.editorContent] || contentDefaultMessage;\r\n        return dispatch(text({ ...stateToChange.text }));\r\n      }\r\n      stateToChange.userActivity = dataFromServer.data.userActivity;\r\n      dispatch(currentUsers({ ...stateToChange.currentUsers }));\r\n      dispatch(userActivity({ ...stateToChange.userActivity }));\r\n      dispatch(text({ ...stateToChange.text }));\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Navbar color=\"light\" light>\r\n        {state.logInReducer != null ? (\r\n          <NavbarBrand href=\"/\">Exit document editor</NavbarBrand>\r\n        ) : (\r\n          <NavbarBrand href=\"/\">Real-time document editor</NavbarBrand>\r\n        )}\r\n      </Navbar>\r\n      <div className=\"container-fluid\">\r\n        {state.logInReducer != null ? (\r\n          <ShowEditorSection />\r\n        ) : (\r\n          <ShowLoginSection />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { UPDATE_CLIENT } from \"./clientTypes\";\r\n\r\nexport const client = payload => {\r\n  return {\r\n    type: UPDATE_CLIENT,\r\n    payload: payload\r\n  };\r\n};\r\n","export const UPDATE_CLIENT = 'UPDATE_CLIENT';","import { CONNECT_WEBSOCKET } from \"./websocketTypes\";\r\n\r\nexport const websocket = payload => {\r\n  return {\r\n    type: CONNECT_WEBSOCKET,\r\n    payload: payload\r\n  };\r\n};\r\n","export const CONNECT_WEBSOCKET= 'CONNECT_WEBSOCKET';","import { SET_USERNAME } from \"./logInTypes\";\r\n\r\nconst initialState = null;\r\n\r\nconst logInReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USERNAME:\r\n      return {\r\n        ...state,\r\n        username: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default logInReducer;\r\n","import { CONNECT_WEBSOCKET } from \"../websocket/websocketTypes\";\r\n\r\nconst initialState = { websocketConnected: false };\r\n\r\nconst websocketReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONNECT_WEBSOCKET:\r\n      return {\r\n        ...state,\r\n        websocketConnected: action.payload.websocketConnected\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default websocketReducer;\r\n","import { UPDATE_CLIENT } from \"../client/clientTypes\";\r\n\r\nconst initialState = { client: \"\" };\r\n\r\nconst clientReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CLIENT:\r\n      return {\r\n        ...state,\r\n        client: action.payload.client\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default clientReducer;\r\n","import { UPDATE_CURRENT_USERS } from \"../serverdata/serverDataTypes\";\r\nimport { UPDATE_USER_ACTIVITY } from \"../serverdata/serverDataTypes\";\r\nimport { UPDATE_TEXT } from \"../serverdata/serverDataTypes\";\r\n\r\nconst initialState = {\r\n  text: \"\"\r\n};\r\nconst initState = {\r\n  currentUsers: {}\r\n};\r\nconst activityState = {\r\n  userActivity: {}\r\n};\r\n\r\nexport const currentUsersReducer = (state = initState, action) => {\r\n  if (action.payload === undefined) return state;\r\n\r\n  switch (action.type) {\r\n    case UPDATE_CURRENT_USERS:\r\n      return {\r\n        ...state,\r\n        currentUsers: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userActivityReducer = (state = activityState, action) => {\r\n  if (action.payload === undefined) return state;\r\n  switch (action.type) {\r\n    case UPDATE_USER_ACTIVITY:\r\n      return {\r\n        ...state,\r\n        userActivity: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const textReducer = (state = initialState.text, action) => {\r\n  if (action.payload === undefined) return state;\r\n  switch (action.type) {\r\n    case UPDATE_TEXT:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport logInReducer from \"./login/logInReducers\";\r\nimport websocketReducer from \"./websocket/websocketReducers\";\r\nimport clientReducer from \"./client/clientReducers\";\r\nimport {\r\n  userActivityReducer,\r\n  currentUsersReducer,\r\n  textReducer\r\n} from \"./serverdata/serverDataReducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  logInReducer,\r\n  clientReducer,\r\n  websocketReducer,\r\n  userActivityReducer,\r\n  currentUsersReducer,\r\n  textReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App />\r\n  </Provider>, \r\n                \r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}